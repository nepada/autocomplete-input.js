{"version":3,"file":"autocomplete-input.js","sources":["../../src/js/index.js","../../src/js/autocomplete-input.js"],"sourcesContent":["import $ from 'jquery';\nimport 'corejs-typeahead/dist/typeahead.jquery';\nimport Bloodhound from 'corejs-typeahead/dist/bloodhound';\n\nfunction initializeInput(input) {\n    const $input = $(input);\n    if ($input.is('.tt-input, .tt-hint')) {\n        return;\n    }\n\n    const autocompleteUrl = $input.data('autocompleteUrl');\n    const autocompleteQueryPlaceholder = $input.data('autocompleteQueryPlaceholder') || '__QUERY_PLACEHOLDER__';\n    const autocompleteMinLength = $input.data('autocompleteMinLength') || 1;\n\n    $input.typeahead(\n        {\n            highlight: true,\n            autoselect: true,\n            minLength: autocompleteMinLength,\n        },\n        {\n            source: new Bloodhound({\n                queryTokenizer: Bloodhound.tokenizers.whitespace,\n                datumTokenizer: Bloodhound.tokenizers.whitespace,\n                remote: {\n                    url: autocompleteUrl,\n                    wildcard: autocompleteQueryPlaceholder,\n                },\n            }),\n        },\n    );\n}\n\nfunction initializeForm(form) {\n    $(form)\n        .find('input[data-autocomplete-url]')\n        .each((idx, input) => {\n            initializeInput(input);\n        });\n}\n\nfunction initializeAutocomplete(Nette) {\n    // Initialize all forms on document ready\n    $(() => {\n        $('form').each((idx, form) => {\n            initializeForm(form);\n        });\n    });\n\n    // Tap into Nette.initForm() to provide AJAX snippet support via e.g. Naja\n    const originalInitForm = Nette.initForm;\n    Nette.initForm = (form) => {\n        originalInitForm(form);\n        initializeForm(form);\n    };\n}\n\nexport default initializeAutocomplete;\n","import Nette from 'nette-forms';\nimport initializeAutocomplete from './index';\n\ninitializeAutocomplete(Nette);\n"],"names":["initializeInput","input","$input","$","is","autocompleteUrl","data","autocompleteQueryPlaceholder","autocompleteMinLength","typeahead","highlight","autoselect","minLength","source","Bloodhound","queryTokenizer","tokenizers","whitespace","datumTokenizer","remote","url","wildcard","initializeForm","form","find","each","idx","initializeAutocomplete","Nette","originalInitForm","initForm"],"mappings":";;;;;;IAIA,SAASA,eAAe,CAACC,KAAK,EAAE;IAC5B,EAAA,IAAMC,MAAM,GAAGC,CAAC,CAACF,KAAK,CAAC,CAAA;IACvB,EAAA,IAAIC,MAAM,CAACE,EAAE,CAAC,qBAAqB,CAAC,EAAE;IAClC,IAAA,OAAA;IACJ,GAAA;IAEA,EAAA,IAAMC,eAAe,GAAGH,MAAM,CAACI,IAAI,CAAC,iBAAiB,CAAC,CAAA;MACtD,IAAMC,4BAA4B,GAAGL,MAAM,CAACI,IAAI,CAAC,8BAA8B,CAAC,IAAI,uBAAuB,CAAA;MAC3G,IAAME,qBAAqB,GAAGN,MAAM,CAACI,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAA;MAEvEJ,MAAM,CAACO,SAAS,CACZ;IACIC,IAAAA,SAAS,EAAE,IAAI;IACfC,IAAAA,UAAU,EAAE,IAAI;IAChBC,IAAAA,SAAS,EAAEJ,qBAAAA;IACf,GAAC,EACD;QACIK,MAAM,EAAE,IAAIC,UAAU,CAAC;IACnBC,MAAAA,cAAc,EAAED,UAAU,CAACE,UAAU,CAACC,UAAU;IAChDC,MAAAA,cAAc,EAAEJ,UAAU,CAACE,UAAU,CAACC,UAAU;IAChDE,MAAAA,MAAM,EAAE;IACJC,QAAAA,GAAG,EAAEf,eAAe;IACpBgB,QAAAA,QAAQ,EAAEd,4BAAAA;IACd,OAAA;SACH,CAAA;IACL,GAAC,CACJ,CAAA;IACL,CAAA;IAEA,SAASe,cAAc,CAACC,IAAI,EAAE;IAC1BpB,EAAAA,CAAC,CAACoB,IAAI,CAAC,CACFC,IAAI,CAAC,8BAA8B,CAAC,CACpCC,IAAI,CAAC,UAACC,GAAG,EAAEzB,KAAK,EAAK;QAClBD,eAAe,CAACC,KAAK,CAAC,CAAA;IAC1B,GAAC,CAAC,CAAA;IACV,CAAA;IAEA,SAAS0B,sBAAsB,CAACC,KAAK,EAAE;IACnC;IACAzB,EAAAA,CAAC,CAAC,YAAM;QACJA,CAAC,CAAC,MAAM,CAAC,CAACsB,IAAI,CAAC,UAACC,GAAG,EAAEH,IAAI,EAAK;UAC1BD,cAAc,CAACC,IAAI,CAAC,CAAA;IACxB,KAAC,CAAC,CAAA;IACN,GAAC,CAAC,CAAA;;IAEF;IACA,EAAA,IAAMM,gBAAgB,GAAGD,KAAK,CAACE,QAAQ,CAAA;IACvCF,EAAAA,KAAK,CAACE,QAAQ,GAAG,UAACP,IAAI,EAAK;QACvBM,gBAAgB,CAACN,IAAI,CAAC,CAAA;QACtBD,cAAc,CAACC,IAAI,CAAC,CAAA;OACvB,CAAA;IACL;;ICpDAI,sBAAsB,CAACC,KAAK,CAAC;;;;;;"}